{"version":3,"sources":["../../js/src/custom-tooltips.js"],"names":["CustomTooltips","tooltipModel","PREFIX","window","CoreUIDefaults","prefix","ClassName","ABOVE","BELOW","CHARTJS_TOOLTIP","NO_TRANSFORM","TOOLTIP_BODY","TOOLTIP_BODY_ITEM","TOOLTIP_BODY_ITEM_COLOR","TOOLTIP_BODY_ITEM_LABEL","TOOLTIP_BODY_ITEM_VALUE","TOOLTIP_HEADER","TOOLTIP_HEADER_ITEM","Selector","DIV","SPAN","TOOLTIP","this","_chart","canvas","id","_idMaker","Math","random","toString","_canvasId","_setCanvasId","tooltip","document","getElementById","createElement","className","parentNode","appendChild","opacity","style","classList","remove","yAlign","add","body","titleLines","title","tooltipHeader","forEach","tooltipHeaderTitle","innerHTML","tooltipBody","map","item","lines","i","tooltipBodyItem","colors","labelColors","tooltipBodyItemColor","backgroundColor","split","length","tooltipBodyItemLabel","tooltipBodyItemValue","pop","position","getBoundingClientRect","positionY","offsetTop","positionLeft","offsetLeft","caretX","positionTop","caretY","halfWidth","width","left","top"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Custom Tooltips for Chart.js (v2.0.0-alpha.0): custom-tooltips.js\n * Licensed under MIT (https://coreui.io/plugins/chart.js)\n * --------------------------------------------------------------------------\n */\n\nfunction CustomTooltips(tooltipModel) {\n  // Add unique id if not exist\n  const _setCanvasId = () => {\n    const _idMaker = () => {\n      const _hex = 16\n      const _multiplier = 0x10000\n      return ((1 + Math.random()) * _multiplier | 0).toString(_hex)\n    }\n    const _canvasId = `_canvas-${_idMaker() + _idMaker()}`\n    this._chart.canvas.id = _canvasId\n    return _canvasId\n  }\n\n  // eslint-disable-next-line no-nested-ternary\n  const PREFIX = window.CoreUIDefaults ? window.CoreUIDefaults.prefix ? window.CoreUIDefaults.prefix : 'c-' : 'c-'\n\n  const ClassName = {\n    ABOVE                   : `${PREFIX}above`,\n    BELOW                   : `${PREFIX}below`,\n    CHARTJS_TOOLTIP         : `${PREFIX}chartjs-tooltip`,\n    NO_TRANSFORM            : `${PREFIX}no-transform`,\n    TOOLTIP_BODY            : `${PREFIX}tooltip-body`,\n    TOOLTIP_BODY_ITEM       : `${PREFIX}tooltip-body-item`,\n    TOOLTIP_BODY_ITEM_COLOR : `${PREFIX}tooltip-body-item-color`,\n    TOOLTIP_BODY_ITEM_LABEL : `${PREFIX}tooltip-body-item-label`,\n    TOOLTIP_BODY_ITEM_VALUE : `${PREFIX}tooltip-body-item-value`,\n    TOOLTIP_HEADER          : `${PREFIX}tooltip-header`,\n    TOOLTIP_HEADER_ITEM     : `${PREFIX}tooltip-header-item`\n  }\n\n  const Selector = {\n    DIV     : 'div',\n    SPAN    : 'span',\n    TOOLTIP : `${this._chart.canvas.id || _setCanvasId()}-tooltip`\n  }\n\n  let tooltip = document.getElementById(Selector.TOOLTIP)\n\n  if (!tooltip) {\n    tooltip = document.createElement('div')\n    tooltip.id = Selector.TOOLTIP\n    tooltip.className = ClassName.CHARTJS_TOOLTIP\n    this._chart.canvas.parentNode.appendChild(tooltip)\n  }\n\n  // Hide if no tooltip\n  if (tooltipModel.opacity === 0) {\n    tooltip.style.opacity = 0\n    return\n  }\n\n  // Set caret Position\n  tooltip.classList.remove(ClassName.ABOVE, ClassName.BELOW, ClassName.NO_TRANSFORM)\n  if (tooltipModel.yAlign) {\n    tooltip.classList.add(tooltipModel.yAlign)\n  } else {\n    tooltip.classList.add(ClassName.NO_TRANSFORM)\n  }\n\n  // Set Text\n  if (tooltipModel.body) {\n    const titleLines = tooltipModel.title || []\n\n    const tooltipHeader = document.createElement(Selector.DIV)\n    tooltipHeader.className = ClassName.TOOLTIP_HEADER\n\n    titleLines.forEach((title) => {\n      const tooltipHeaderTitle = document.createElement(Selector.DIV)\n      tooltipHeaderTitle.className = ClassName.TOOLTIP_HEADER_ITEM\n      tooltipHeaderTitle.innerHTML = title\n      tooltipHeader.appendChild(tooltipHeaderTitle)\n    })\n\n    const tooltipBody = document.createElement(Selector.DIV)\n    tooltipBody.className = ClassName.TOOLTIP_BODY\n\n    const tooltipBodyItems = tooltipModel.body.map((item) => item.lines)\n    tooltipBodyItems.forEach((item, i) => {\n      const tooltipBodyItem = document.createElement(Selector.DIV)\n      tooltipBodyItem.className = ClassName.TOOLTIP_BODY_ITEM\n\n      const colors = tooltipModel.labelColors[i]\n\n      const tooltipBodyItemColor = document.createElement(Selector.SPAN)\n      tooltipBodyItemColor.className = ClassName.TOOLTIP_BODY_ITEM_COLOR\n      tooltipBodyItemColor.style.backgroundColor = colors.backgroundColor\n\n      tooltipBodyItem.appendChild(tooltipBodyItemColor)\n\n      if (item[0].split(':').length > 1) {\n        const tooltipBodyItemLabel = document.createElement(Selector.SPAN)\n        tooltipBodyItemLabel.className = ClassName.TOOLTIP_BODY_ITEM_LABEL\n        tooltipBodyItemLabel.innerHTML = item[0].split(': ')[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemLabel)\n\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0].split(': ').pop()\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      } else {\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      }\n\n      tooltipBody.appendChild(tooltipBodyItem)\n    })\n\n    tooltip.innerHTML = ''\n\n    tooltip.appendChild(tooltipHeader)\n    tooltip.appendChild(tooltipBody)\n  }\n\n  const position = this._chart.canvas.getBoundingClientRect()\n\n  const positionY = this._chart.canvas.offsetTop\n  const positionX = this._chart.canvas.offsetLeft\n\n  let positionLeft = positionX + tooltipModel.caretX\n  const positionTop = positionY + tooltipModel.caretY\n  // eslint-disable-next-line\n  const halfWidth = tooltipModel.width / 2\n\n  if (positionLeft + halfWidth > position.width) {\n    positionLeft -= halfWidth\n  } else if (positionLeft < halfWidth) {\n    positionLeft += halfWidth\n  }\n\n  // Display, position, and set styles for font\n  tooltip.style.opacity = 1\n  tooltip.style.left = `${positionLeft}px`\n  tooltip.style.top = `${positionTop}px`\n}\n\nexport default CustomTooltips\n"]}